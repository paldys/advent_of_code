defmodule AdventOfCode.Puzzles.Day22Test do
  use ExUnit.Case

  @test_steps_small [
    {:on, {{10, 12}, {10, 12}, {10, 12}}},
    {:on, {{11, 13}, {11, 13}, {11, 13}}},
    {:off, {{9, 11}, {9, 11}, {9, 11}}},
    {:on, {{10, 10}, {10, 10}, {10, 10}}}
  ]

  @test_steps_medium [
    {:on, {{-20, 26}, {-36, 17}, {-47, 7}}},
    {:on, {{-20, 33}, {-21, 23}, {-26, 28}}},
    {:on, {{-22, 28}, {-29, 23}, {-38, 16}}},
    {:on, {{-46, 7}, {-6, 46}, {-50, -1}}},
    {:on, {{-49, 1}, {-3, 46}, {-24, 28}}},
    {:on, {{2, 47}, {-22, 22}, {-23, 27}}},
    {:on, {{-27, 23}, {-28, 26}, {-21, 29}}},
    {:on, {{-39, 5}, {-6, 47}, {-3, 44}}},
    {:on, {{-30, 21}, {-8, 43}, {-13, 34}}},
    {:on, {{-22, 26}, {-27, 20}, {-29, 19}}},
    {:off, {{-48, -32}, {26, 41}, {-47, -37}}},
    {:on, {{-12, 35}, {6, 50}, {-50, -2}}},
    {:off, {{-48, -32}, {-32, -16}, {-15, -5}}},
    {:on, {{-18, 26}, {-33, 15}, {-7, 46}}},
    {:off, {{-40, -22}, {-38, -28}, {23, 41}}},
    {:on, {{-16, 35}, {-41, 10}, {-47, 6}}},
    {:off, {{-32, -23}, {11, 30}, {-14, 3}}},
    {:on, {{-49, -5}, {-3, 45}, {-29, 18}}},
    {:off, {{18, 30}, {-20, -8}, {-3, 13}}},
    {:on, {{-41, 9}, {-7, 43}, {-33, 15}}},
    {:on, {{-54112, -39298}, {-85059, -49293}, {-27449, 7877}}},
    {:on, {{967, 23432}, {45373, 81175}, {27513, 53682}}}
  ]

  @test_steps_large [
    {:on, {{-5, 47}, {-31, 22}, {-19, 33}}},
    {:on, {{-44, 5}, {-27, 21}, {-14, 35}}},
    {:on, {{-49, -1}, {-11, 42}, {-10, 38}}},
    {:on, {{-20, 34}, {-40, 6}, {-44, 1}}},
    {:off, {{26, 39}, {40, 50}, {-2, 11}}},
    {:on, {{-41, 5}, {-41, 6}, {-36, 8}}},
    {:off, {{-43, -33}, {-45, -28}, {7, 25}}},
    {:on, {{-33, 15}, {-32, 19}, {-34, 11}}},
    {:off, {{35, 47}, {-46, -34}, {-11, 5}}},
    {:on, {{-14, 36}, {-6, 44}, {-16, 29}}},
    {:on, {{-57795, -6158}, {29564, 72030}, {20435, 90618}}},
    {:on, {{36731, 105_352}, {-21140, 28532}, {16094, 90401}}},
    {:on, {{30999, 107_136}, {-53464, 15513}, {8553, 71215}}},
    {:on, {{13528, 83982}, {-99403, -27377}, {-24141, 23996}}},
    {:on, {{-72682, -12347}, {18159, 111_354}, {7391, 80950}}},
    {:on, {{-1060, 80757}, {-65301, -20884}, {-103_788, -16709}}},
    {:on, {{-83015, -9461}, {-72160, -8347}, {-81239, -26856}}},
    {:on, {{-52752, 22273}, {-49450, 9096}, {54442, 119_054}}},
    {:on, {{-29982, 40483}, {-108_474, -28371}, {-24328, 38471}}},
    {:on, {{-4958, 62750}, {40422, 118_853}, {-7672, 65583}}},
    {:on, {{55694, 108_686}, {-43367, 46958}, {-26781, 48729}}},
    {:on, {{-98497, -18186}, {-63569, 3412}, {1232, 88485}}},
    {:on, {{-726, 56291}, {-62629, 13224}, {18033, 85226}}},
    {:on, {{-110_886, -34664}, {-81338, -8658}, {8914, 63723}}},
    {:on, {{-55829, 24974}, {-16897, 54165}, {-121_762, -28058}}},
    {:on, {{-65152, -11147}, {22489, 91432}, {-58782, 1780}}},
    {:on, {{-120_100, -32970}, {-46592, 27473}, {-11695, 61039}}},
    {:on, {{-18631, 37533}, {-124_565, -50804}, {-35667, 28308}}},
    {:on, {{-57817, 18248}, {49321, 117_703}, {5745, 55881}}},
    {:on, {{14781, 98692}, {-1341, 70827}, {15753, 70151}}},
    {:on, {{-34419, 55919}, {-19626, 40991}, {39015, 114_138}}},
    {:on, {{-60785, 11593}, {-56135, 2999}, {-95368, -26915}}},
    {:on, {{-32178, 58085}, {17647, 101_866}, {-91405, -8878}}},
    {:on, {{-53655, 12091}, {50097, 105_568}, {-75335, -4862}}},
    {:on, {{-111_166, -40997}, {-71714, 2688}, {5609, 50954}}},
    {:on, {{-16602, 70118}, {-98693, -44401}, {5197, 76897}}},
    {:on, {{16383, 101_554}, {4615, 83635}, {-44907, 18747}}},
    {:off, {{-95822, -15171}, {-19987, 48940}, {10804, 104_439}}},
    {:on, {{-89813, -14614}, {16069, 88491}, {-3297, 45228}}},
    {:on, {{41075, 99376}, {-20427, 49978}, {-52012, 13762}}},
    {:on, {{-21330, 50085}, {-17944, 62733}, {-112_280, -30197}}},
    {:on, {{-16478, 35915}, {36008, 118_594}, {-7885, 47086}}},
    {:off, {{-98156, -27851}, {-49952, 43171}, {-99005, -8456}}},
    {:off, {{2032, 69770}, {-71013, 4824}, {7471, 94418}}},
    {:on, {{43670, 120_875}, {-42068, 12382}, {-24787, 38892}}},
    {:off, {{37514, 111_226}, {-45862, 25743}, {-16714, 54663}}},
    {:off, {{25699, 97951}, {-30668, 59918}, {-15349, 69697}}},
    {:off, {{-44271, 17935}, {-9516, 60759}, {49131, 112_598}}},
    {:on, {{-61695, -5813}, {40978, 94975}, {8655, 80240}}},
    {:off, {{-101_086, -9439}, {-7088, 67543}, {33935, 83858}}},
    {:off, {{18020, 114_017}, {-48931, 32606}, {21474, 89843}}},
    {:off, {{-77139, 10506}, {-89994, -18797}, {-80, 59318}}},
    {:off, {{8476, 79288}, {-75520, 11602}, {-96624, -24783}}},
    {:on, {{-47488, -1262}, {24338, 100_707}, {16292, 72967}}},
    {:off, {{-84341, 13987}, {2429, 92914}, {-90671, -1318}}},
    {:off, {{-37810, 49457}, {-71013, -7894}, {-105_357, -13188}}},
    {:off, {{-27365, 46395}, {31009, 98017}, {15428, 76570}}},
    {:off, {{-70369, -16548}, {22648, 78696}, {-1892, 86821}}},
    {:on, {{-53470, 21291}, {-120_233, -33476}, {-44150, 38147}}},
    {:off, {{-93533, -4276}, {-16170, 68771}, {-104_985, -24507}}}
  ]

  test "parse input" do
    test_input = """
    on x=10..12,y=10..12,z=10..12
    on x=11..13,y=11..13,z=11..13
    off x=9..11,y=9..11,z=9..11
    on x=10..10,y=10..10,z=10..10
    """

    assert AdventOfCode.Puzzles.Day22.parse(test_input) == @test_steps_small
  end

  test "overlapping cubes" do
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{0, 5}}, {{0, 5}})
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{0, 5}}, {{-1, 5}})
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{0, 5}}, {{1, 5}})
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{0, 5}}, {{0, 4}})
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{0, 5}}, {{0, 6}})
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{0, 2}}, {{2, 4}})
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{2, 4}}, {{0, 2}})
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{0, 0}}, {{0, 2}})
    assert AdventOfCode.Puzzles.Day22.is_overlapping({{1, 3}}, {{2, 2}})
    refute AdventOfCode.Puzzles.Day22.is_overlapping({{0, 0}}, {{1, 2}})
    refute AdventOfCode.Puzzles.Day22.is_overlapping({{1, 2}}, {{-1, 0}})
  end

  test "substract cubes" do
    left = {{1, 3}, {1, 3}, {1, 3}}
    right = {{2, 2}, {2, 2}, {2, 2}}

    expected = [
      {{1, 1}, {1, 3}, {1, 3}},
      {{3, 3}, {1, 3}, {1, 3}},
      {{2, 2}, {1, 1}, {1, 3}},
      {{2, 2}, {3, 3}, {1, 3}},
      {{2, 2}, {2, 2}, {1, 1}},
      {{2, 2}, {2, 2}, {3, 3}}
    ]

    assert AdventOfCode.Puzzles.Day22.substract(left, right) == expected
  end

  test "solve 1st puzzle" do
    assert AdventOfCode.Puzzles.Day22.solve1(@test_steps_small) == 39
    assert AdventOfCode.Puzzles.Day22.solve1(@test_steps_medium) == 590_784
  end

  test "solve 2nd puzzle" do
    assert AdventOfCode.Puzzles.Day22.solve2(@test_steps_large) == 2_758_514_936_282_235
  end
end
